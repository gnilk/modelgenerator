package main

//
// Implements a XML to GO datamodel transformation
// Creates some kind of POCO/POJO GO objects from the XML definition
//

import (
	"fmt"
	"io/ioutil"
	"strings"
)

func addImport(doc *XMLDoc, pkgName string) []XMLImport {
	doc.Imports = append(doc.Imports, XMLImport{
		DisablePersistence: false,
		Package:            pkgName,
	})
	return doc.Imports
}

func generateCode(options *Options, doc XMLDoc, source string, splitInFiles bool, converters bool, verbose int, outputDir string) string {
	code := ""
	if converters {
		doc.Imports = addImport(&doc, "bytes")         //append(doc.Imports, "bytes")
		doc.Imports = addImport(&doc, "encoding/json") //append(doc.Imports, "encoding/json")
		doc.Imports = addImport(&doc, "encoding/xml")  //append(doc.Imports, "encoding/xml")
	}

	if splitInFiles != true {
		code += generateHeader(doc, source)
		// generate code for all defines
		for i := 0; i < len(doc.Defines); i++ {
			code += doc.Defines[i].generateCode(options, converters)
		}
	} else {
		// generate code for all defines
		for _, define := range doc.Defines {
			code := ""
			code += generateHeader(doc, source)
			code += define.generateCode(options, converters)
			if string(outputDir[len(outputDir)-1:]) != "/" {
				outputDir += "/"
			}
			fileName := outputDir + define.Name + ".go"

			if verbose > 0 {
				fmt.Printf("Writing code for %s to %s\n", define.Name, fileName)
			}
			ioutil.WriteFile(fileName, []byte(code), 0644)
		}
	}
	return code
}

func generateHeader(doc XMLDoc, source string) string {

	code := ""
	code += fmt.Sprintf("package %s\n", doc.Namespace)
	code += fmt.Sprintf("\n")
	if len(doc.Imports) > 0 {
		code += fmt.Sprintf("import (\n")
		for _, Import := range doc.Imports {
			//log.Printf("Import: %s", Import.Package)
			importstatements := strings.Split(Import.Package, " ")
			if len(importstatements) == 1 {
				code += fmt.Sprintf("  \"%s\"\n", Import.Package)
			} else {
				code += fmt.Sprintf("  %s \"%s\"\n", importstatements[0], importstatements[1])
			}

		}
		code += fmt.Sprintf(")\n")
	}

	code += fmt.Sprintf("//\n")
	code += fmt.Sprintf("// this code is generated by the modelgenerator\n")
	code += fmt.Sprintf("// data model source = %s\n", source)
	code += fmt.Sprintf("//\n")
	code += fmt.Sprintf("\n")

	return code
}
